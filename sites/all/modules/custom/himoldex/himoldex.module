<?php

/**
 *  * Implements hook_views_api().
 *   */
function himoldex_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Fix in date/pathauto module
 */
function himoldex_pathauto_alias_alter(&$alias, array &$context) {
  if ($context['module'] == 'node' && $context['type'] == 'video') {
    // Remove the buggy date token.
    $alias = str_replace('-000000', '', $alias);
  }
}

/**
 * Implements hook_node_prepare().
 *
 * - Add new videos from YouTube playlist or Mediasite folder for courses.
 */
function himoldex_node_prepare($node) {
  if (!empty($node->nid) && ($node->type == 'course')) {
    _himoldex_add_videos_to_node($node, 'nb');
  }
}

/**
 * Implements hook_node_presave().
 *
 * - Empty cache for course if YouTube playlist or Mediasite folder changed.
 */
function himoldex_node_presave($node) {
  if (($node->type == 'course') && (isset($node->original))) {
    $cache_bin = 'cache_himoldex';
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $mediasite_folder = $node_wrapper->field_mediasite_folder->value();
    $youtube_playlist = $node_wrapper->field_youtube_playlist->value();
    $orig_node_wrapper = entity_metadata_wrapper('node', $node->original);
    $orig_mediasite_folder = $orig_node_wrapper->field_mediasite_folder->value();
    $orig_youtube_playlist = $orig_node_wrapper->field_youtube_playlist->value();

    if ($mediasite_folder != $orig_mediasite_folder) {
      $skip_cache_id = 'himoldex:mediasite_folder_skip:' . $node->nid;
      cache_clear_all($skip_cache_id, $cache_bin);
    }
    if ($youtube_playlist != $orig_youtube_playlist) {
      $pagetoken_cache_id = 'himoldex:youtube_playlist_pagetoken:' . $node->nid;
      cache_clear_all($pagetoken_cache_id, $cache_bin);
    }
  }
}

/**
 * Implements hook_node_validate().
 *
 * - Avoid duplicate course codes.
 */
function himoldex_node_validate($node, $form) {
  // Only validate courses.
  $course_type = 'course';
  if ($node->type == $course_type) {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $course_code = $node_wrapper->field_course_code->value();
    // Don't validate existing nodes with unchanged course code.
    if (!empty($node->nid)) {
      $orig_node = node_load($node->nid);
      $orig_node_wrapper = entity_metadata_wrapper('node', $orig_node);
      $orig_course_code = $orig_node_wrapper->field_course_code->value();
      if ($course_code == $orig_course_code) {
	return;
      }
    }
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $course_type)
      ->fieldCondition('field_course_code', 'value', $course_code, '=');
    $result = $query->execute();
    if (isset($result['node'])) {
      form_set_error('field_course_code', t('Det fins allerede et emne med denne koden.'));
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Making it clear that we use our full names for user registration.
 */
function himoldex_form_user_login_alter(&$form, &$form_state, $form_id) {
  $form['name']['#description'] = 'Ditt vanlige brukernavn ved Høgskolen i Molde.';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Room and phone shouldn't be editable.
 */
function himoldex_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['field_room']['#disabled'] = TRUE;
  $form['field_phone']['#disabled'] = TRUE;
}

/**
 * Implements hook_block_info().
 */
function himoldex_block_info() {
  $blocks['studyhandbook_and_samordnaopptak'] = array(
    'info' => t('HimoldeX: Lenke til studiehåndbok og Samordna opptak'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['studyhandbook_and_subjects'] = array(
    'info' => t('HimoldeX: Lenke til studiehåndbok og informasjon om emnestudent'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['studyhandbook'] = array(
    'info' => t('HimoldeX: Lenke til studiehåndbok'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['about_social'] = array(
    'info' => t('HimoldeX: Lenker til Om-siden og sosiale tjenester'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['promo_video_himoldex'] = array(
    'info' => t('HimoldeX: Promovideo HiMoldeX (YouTube)'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['promo_video_tour'] = array(
    'info' => t('HimoldeX: Promovideo Tour (YouTube)'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['promo_video_pres'] = array(
    'info' => t('HimoldeX: Promovideo Pres. (YouTube)'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['latest_lecture'] = array(
    'info' => t('HimoldeX: Siste forelesning (YouTube)'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['banner_small'] = array(
    'info' => t('HimoldeX: Banner liten'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['banner'] = array(
    'info' => t('HimoldeX: Banner'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['study_big_logo'] = array(
    'info' => t('HimoldeX: Stor logo for studium'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['study_small_logo_logistikk'] = array(
    'info' => 'HimoldeX: Liten logo for logistikk',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['study_small_logo_okonomi'] = array(
    'info' => 'HimoldeX: Liten logo for økonomi',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['study_small_logo_samfunn'] = array(
    'info' => 'HimoldeX: Liten logo for juss og samfunnsfag',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['study_small_logo_idrett'] = array(
    'info' => 'HimoldeX: Liten logo for idrett',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['study_small_logo_sykepleie'] = array(
    'info' => 'HimoldeX: Liten logo for sykepleie',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['study_small_logo_vernepleie'] = array(
    'info' => 'HimoldeX: Liten logo for vernepleie',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['study_small_logo_it'] = array(
    'info' => 'HimoldeX: Liten logo for IT',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['study_small_logo_euv'] = array(
    'info' => 'HimoldeX: Liten logo for EUV',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['study_small_logo_ALL'] = array(
    'info' => 'HimoldeX: Liten logo for alle emner',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function himoldex_block_view($delta = '') {
  //The $delta parameter tells us which block is being requested.
  $block['subject'] = '<none>';
  switch ($delta) {
    case 'studyhandbook_and_samordnaopptak':
    case 'studyhandbook_and_subjects':
    case 'studyhandbook':
    case 'about_social':
    case 'promo_video_himoldex':
    case 'promo_video_tour':
    case 'promo_video_pres':
    case 'latest_lecture':
    case 'banner':
    case 'banner_small':
    case 'study_big_logo':
      $block['content'] = _himoldex_block_contents($delta);
      break;
    case 'study_small_logo_logistikk':
      $block['content'] = _himoldex_block_contents($delta, 'Logistikk');
      break;
    case 'study_small_logo_okonomi':
      $block['content'] = _himoldex_block_contents($delta, 'Økonomi');
      break;
    case 'study_small_logo_samfunn':
      $block['content'] = _himoldex_block_contents($delta, 'Juss og samfunnsfag');
      break;
    case 'study_small_logo_idrett':
      $block['content'] = _himoldex_block_contents($delta, 'Idrett');
      break;
    case 'study_small_logo_sykepleie':
      $block['content'] = _himoldex_block_contents($delta, 'Sykepleie');
      break;
    case 'study_small_logo_vernepleie':
      $block['content'] = _himoldex_block_contents($delta, 'Vernepleie');
      break;
    case 'study_small_logo_it':
      $block['content'] = _himoldex_block_contents($delta, 'IT');
      break;
    case 'study_small_logo_euv':
      $block['content'] = _himoldex_block_contents($delta, 'Videre- og etterutdanning');
      break;
    case 'study_small_logo_ALL':
      $block['content'] = _himoldex_block_contents($delta, 'Alle emner');
      break;
  }
  return $block;
}

/**
 * Produces the actual block content.
 */
function _himoldex_block_contents($which_block, $title='') {
    switch ($which_block) {
    case 'studyhandbook_and_samordnaopptak':
      $html = <<<EOM
<p>
    Les i <a href="https://studiehandbok.himolde.no/">studiehåndboken</a> for mer informasjon 
    om våre studier og gå til <a href="http://www.samordnaopptak.no/">Samordna opptak</a> for å søke. 
    Søknadsfrist 15. april.
</p>
EOM;
      return array('#markup' => $html);
    case 'studyhandbook_and_subjects':
      $html = <<<EOM
<ul>
<li>Les i <a href="https://studiehandbok.himolde.no/">studiehåndboken</a> for mer informasjon om våre studier.</li>
<li>Du kan søke om å bli <a href="http://www.himolde.no/studier/Sider/Opptak/Opptak-til-enkeltemne.aspx">emnestudent</a> innen 15. august.</li>
</ul>
EOM;
      return array('#markup' => $html);
    case 'studyhandbook':
      $html = <<<EOM
<p>
    Les i <a href="https://studiehandbok.himolde.no/">studiehåndboken</a> for mer informasjon om våre studier.
</p>
EOM;
      return array('#markup' => $html);
    case 'about_social':
      $html = <<<EOM
<div id="about-social" class="clearfix">
<div class="grid-5">
<!-- a href="/side/om-himoldex">Om HiMoldeX</a -->
Generelt: <a href="mailto:studentservice@himolde.no">studentservice@himolde.no</a> / 712&nbsp;14&nbsp;000
</div>
<div class="grid-2 no-margin center">Følg oss på 
<span class="no-br">
<a href="http://www.facebook.com/himolde" target="_blank"><img src="/img/fb.png"></a>
<a href="http://twitter.com/himolde" target="_blank"><img src="/img/twitter.png"></a>
<a href="http://www.youtube.com/user/himoldex" target="_blank"><img src="/img/youtube.png"></a>
</span>
</div>
<div class="grid-5 last">
Teknisk: <a href="mailto:support@himolde.no">support@himolde.no</a> / 712&nbsp;14&nbsp;175
</div>
</div>
EOM;
      return array('#markup' => $html);
    case 'about_social_old':
      $html = <<<EOM
<p id="about-social">
<a href="/side/om-himoldex">Om HiMoldeX</a> | Følg oss på 
<a href="http://www.facebook.com/himolde" target="_blank"><img src="/img/fb.png" /></a> 
<a href="http://twitter.com/himolde" target="_blank"><img src="/img/twitter.png" /></a> 
<a href="http://www.youtube.com/user/himoldex" target="_blank"><img src="/img/youtube.png" /></a> | 
Kontakt oss på <a href="mailto:post@himoldex.no" target="_blank">post@himoldex.no</a> | Vår offisielle hjemmeside:
<a href="http://www.himolde.no" target="_blank">www.himolde.no</a> 
</p>
EOM;
      return array('#markup' => $html);
    case 'promo_video_himoldex':
      // ID of promo video
      $youtube_video_id = 'Ic3TqFlATRU';
      $html = <<<EOM
<div class="yt_container_third"><div id="yt_player"><img src="/sites/default/files/promovideo-stillbilde-640px.jpg" /></div></div>
EOM;
      if (!user_is_logged_in()) {
	$html .= _himoldex_youtube_js($youtube_video_id);
      }
      return array('#markup' => $html);
    case 'promo_video_tour':
      // ID of promo video
      $youtube_video_id = 'ue_UTxmtx5Y';
      $html = <<<EOM
<div class="yt_container_third"><div id="yt_player"><img src="/sites/default/files/promovideo-stillbilde-640px.jpg" /></div></div>
EOM;
      if (!user_is_logged_in()) {
	$html .= _himoldex_youtube_js($youtube_video_id);
      }
      return array('#markup' => $html);
    case 'promo_video_pres':
      // ID of promo video
      $youtube_video_id = 'gqTqAv-Ee_U';
      $html = <<<EOM
<div class="yt_container_third"><div id="yt_player"><img src="/sites/default/files/promovideo-stillbilde-640px.jpg" /></div></div>
EOM;
      if (!user_is_logged_in()) {
	$html .= _himoldex_youtube_js($youtube_video_id);
      }
      return array('#markup' => $html);
    case 'latest_lecture':
      // Get the IDs of the 10 latest videos (lecture).
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
	->entityCondition('bundle', 'video')
	->fieldCondition('field_video_type', 'value', 'lecture', '=')
	->propertyOrderBy('created', 'DESC')
	->range(0,10);
      $videoes = $query->execute();
      // Select the first video referenced from an open course
      foreach ($videoes['node'] as $video) {
        $course_query = new EntityFieldQuery();
        $course_query->entityCondition('entity_type', 'node')
	  ->entityCondition('bundle', 'course')
	  ->fieldCondition('field_course_video', 'target_id', $video->nid, 'CONTAINS')
	  ->propertyOrderBy('changed', 'DESC')
	  ->range(0,1);
	$courses = $course_query->execute();
	$course = array_pop($courses['node']);
	$course_wrapper = entity_metadata_wrapper('node', $course->nid);
	if (isset($course_wrapper->field_course_open)) {
	  $open = $course_wrapper->field_course_open->value();
	}
	else {
	  $open = FALSE;
	}
	if ($open) {
	  break;
	}
      }
      // Reassigning $videoes to the selected video.
      $videos = array($video->nid => $video);

      $fields = field_info_instances('node', 'video');
      $field_id = $fields['field_video_youtube']['field_id'];
      field_attach_load('node', $videos, FIELD_LOAD_CURRENT, array('field_id' => $field_id));
      $field_id = $fields['field_video_mediasite']['field_id'];
      field_attach_load('node', $videos, FIELD_LOAD_CURRENT, array('field_id' => $field_id));
      $field_video_youtube = field_get_items('node', reset($videos), 'field_video_youtube');
      $field_video_mediasite = field_get_items('node', reset($videos), 'field_video_mediasite');
      if (!empty($field_video_youtube)) {
        // This is a YouTube video
        $html = <<<EOM
<div class="yt_container_third"><div id="yt_player"><img src="/sites/default/files/promovideo-stillbilde-640px.jpg" /></div></div>
EOM;
        $youtube_video_id = $field_video_youtube[0]['video_id'];
        if (!user_is_logged_in()) {
          $html .= _himoldex_youtube_js($youtube_video_id);
        }
      }
      elseif (!empty($field_video_mediasite)) {
        // This is a Mediasite video
        $html = <<<EOM
<div class="yt_container_third">%content%</div>
EOM;
        $mediasite_video_link = $field_video_mediasite[0]['value'];
	if (user_is_logged_in()) {
          $html = str_replace('%content%', '<img src="/sites/default/files/promovideo-stillbilde-640px.jpg" />', $html);
        }
        else {
          $html = str_replace('%content%', "<iframe width='100%' height='100%' src='$mediasite_video_link?autostart=true'></iframe>", $html);
        }
      }
      return array('#markup' => $html);
    case 'banner_small':
      $html = <<<EOM
<p>
<a href="/"><img src="/img/banner-liten-2013-03-11.jpg" width="100%" 
title="HiMoldeX.no er en åpen kursplattform ved Høgskolen i Molde. 
På denne siden finner du kursmateriell for utvalgte kurs ved HiMolde."/></a>
</p>
EOM;
      return array('#markup' => $html);
    case 'banner':
      $html = <<<EOM
<p>
<a href="/"><img src="/img/banner-2013-03-11.jpg" width="100%" 
title="HiMoldeX.no er en åpen kursplattform ved Høgskolen i Molde. 
På denne siden finner du kursmateriell for utvalgte kurs ved HiMolde."/></a>
</p>
EOM;
      return array('#markup' => $html);
    case 'study_big_logo':
      $path = current_path();
      $path_alias = drupal_lookup_path('alias',$path);
      $studium = str_replace('studium/', '', $path_alias);
      $html = <<<EOM
<p><img src="/img/$studium-stor.jpg" width="100%" /></p>
EOM;
      return array('#markup' => $html);
    default:
      $name = str_replace('study_small_logo_', '', $which_block);
      if ($name == 'samfunn') {
        $name = 'juss-og-samfunnsfag';
      }
      else if ($name == 'euv') {
        $name = 'videre-og-etterutdanning';
      }
      if ($name == 'ALL') {
        $path = 'emner';
        $img = '/img/alle-emner.jpg';
      } 
      else {
        $img = '/img/' . $name . '.png';
        $path = 'studium/' . $name;
      }
      // if ($name == 'ALL') {
      if (false) {
        $html = <<<EOM
<div style="position: relative;">
<div style="position: absolute; top: 20px; left: 20px;">
<a class="study-small-logo" href="$path" style="color: white;">$title</a>
</div>
<p><a href="$path"><img class="study-small-logo" src="$img" alt=""/></a></p>
</div>
EOM;
      }
      else {
        $html = <<<EOM
<p class="study-small-logo">
<a href="$path"><img class="study-small-logo" alt="" src="$img"></a> 
<a class="study-small-logo" href="$path">$title</a>
</p>
EOM;
      }
      return array('#markup' => $html);
  }
}

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 *
 * Turning the aggregator block title into a link.
 */
function himoldex_block_view_aggregator_feed_1_alter(&$data, $block) {
  $data['subject'] = '<a href="http://panorama.himolde.no/" title="Nyheter fra Panorama - Høgskolen i Moldes uavhengige nettavis">' . $data['subject']. '</a>'; 
}

function _himoldex_youtube_js($video_id) {
  $html = <<<EOM
<script type="text/javascript">// <![CDATA[
  var tag = document.createElement('script');
  tag.src = "http://www.youtube.com/player_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
  var player;
  function onYouTubePlayerAPIReady() {
    player = new YT.Player('yt_player', {
      playerVars: { 'autoplay': 1, 'autohide': 1, 'rel': 0, 'showinfo': 0},
      height: '100%',
      width: '100%',
      videoId: '$video_id',
      events: {
        'onReady': onPlayerReady}
    });
  }
  function onPlayerReady(event) {
    event.target.mute();
  }
// ]]></script>
EOM;
  return $html;
}

function _himoldex_add_videos_to_node($node, $language) {
  $videos_added = array();
  // Fetch only 10 items on each display of the node edit page
  $itemsPerRequest = 10;
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $youtube_playlist = $node_wrapper->field_youtube_playlist->value();
  $mediasite_folder = $node_wrapper->field_mediasite_folder->value();
  $cache_bin = 'cache_himoldex';
  // If both YouTube playlist and Mediasite folder is set for the course, Mediasite takes presedence.
  if ($mediasite_folder) {
    set_include_path(get_include_path() . PATH_SEPARATOR . '/usr/local/lib/php5/odataphp/framework');
    require_once 'mediasite-odata.php';

    function MediaSiteOnBeforeRequestCallBack($httpRequest) {
      try {
        $conf = variable_get('himoldex_module');
        // API key:
        $httpRequest->Headers->Add('sfapikey', $conf['sfapikey']);
        // Authorization: Basic <base64 encoded username:password>
        $httpRequest->Headers->Add('Authorization', $conf['basic_auth']);
      }
      catch(Exception $ex) {
        die("Some exception");
      }
    }

    // Use caching to get last used skip.
    $skip_cache_id = 'himoldex:mediasite_folder_skip:' . $node->nid;
    $skip_cache = cache_get($skip_cache_id, $cache_bin);
    if (!$skip_cache) {
      $skip = 0;
    }
    else {
      $skip = (int) $skip_cache->data;
    }

    try {
      $svc = new Container(DEFAULT_ODATA_SERVICE_URL);
      $svc->OnBeforeRequest('MediaSiteOnBeforeRequestCallBack', null);
      $request = "Folders('$mediasite_folder')/Presentations?\$select=card&\$orderby=CreationDate asc&\$top=$itemsPerRequest";
      if ($skip > 0) {
        $request .= "&\$skip=$skip";
      }
      $presentationsResponse = $svc->Execute($request);

      foreach($presentationsResponse->Result as $presentation) {
        $video_title = $presentation->Title;
        $video_id = $presentation->Id;
        $video_link = "http://mediasite.himolde.no/Mediasite/Play/" . $video_id;
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'video')
          ->fieldCondition('field_video_mediasite', 'value', $video_link, '=');
        $result = $query->execute();
        if (!isset($result['node'])) {
          $video_published = $presentation->RecordDateLocal;
          list ($video_date, $dummy) = explode('T', $video_published);

          $videonode = new stdClass();
          $videonode->type = 'video';
          node_object_prepare($videonode);

          $videonode->language = $language;
          $videonode->field_video_type[LANGUAGE_NONE][0]['value'] = 'lecture';
          $videonode->field_video_topic[LANGUAGE_NONE][0]['value'] = $video_title;
          $videonode->field_video_mediasite[LANGUAGE_NONE][0]['value'] = $video_link;
          $videonode->field_video_dato[LANGUAGE_NONE][0] = array(
            'value' =>  "$video_date 00:00:00",
            'timezone' => 'Europe/Oslo',
            'timezone_db' =>   'Europe/Oslo',
            'date_type' => 'datetime',
          );

          node_save($videonode);
          drupal_set_message("Opprettet video '$video_title' automatisk fra folderen på Mediasite.");
          $videos_added[] = $videonode->nid;
        }
      }
      // Warn if there are more videos to fetch (and cache the next skip to use).
      if ($presentationsResponse->GetContinuation() != null) {
        cache_set($skip_cache_id, $skip + $itemsPerRequest, $cache_bin);
        $message = sprintf('Hentet %s videoer fra folderen, men det er flere - lagre siden og velg rediger på nytt. (skip: %s)',
          $itemsPerRequest, $skip);
        drupal_set_message($message, 'warning');
      }
    }
    catch(DataServiceRequestException $ex) {
      drupal_set_message('Error: while running the query ' . $ex->Response->getQuery(), 'warning');
    }
    catch (ODataServiceException $e) {
      drupal_set_message("Error:" . $e->getError() . "<br>" . "Detailed Error:" . $e->getDetailedError(), 'warning');
    }
    if (count($videos_added) == 0) {
      drupal_set_message("Ingen nye videoer funnet i folderen på Mediasite.");
    }
  }
  elseif ($youtube_playlist) {
    // Use caching to get last used page token.
    $pagetoken_cache_id = 'himoldex:youtube_playlist_pagetoken:' . $node->nid;
    $pagetoken_cache = cache_get($pagetoken_cache_id, $cache_bin);
    if (!$pagetoken_cache) {
      $pageToken = '';
    }
    else {
      $pageToken = $pagetoken_cache->data;
    }
    // Setup YouTube/Google API
    $glib_info = libraries_info('google-api-php-client');
    $glib_path = libraries_get_path('google-api-php-client');
    set_include_path(get_include_path() . PATH_SEPARATOR . DRUPAL_ROOT . '/' . $glib_path . '/' . $glib_info['path']);
    libraries_load('google-api-php-client');
    require_once 'Google/Service/YouTube.php';
    $client = new Google_Client();
    $client->setApplicationName("HiMoldeX");
    $conf = variable_get('himoldex_module');
    $client->setDeveloperKey($conf['google_api_dev_key']);
    $service = new Google_Service_YouTube($client);
    $optParams = array('playlistId' => $youtube_playlist, 'pageToken' => $pageToken, 'maxResults' => $itemsPerRequest);
    $results = $service->playlistItems->listPlaylistItems('snippet', $optParams);
    // Warn if there are more videos to fetch (and cache the next page token to use).
    if (isset($results['nextPageToken'])) {
      cache_set($pagetoken_cache_id, $results['nextPageToken'], $cache_bin);
      $message = sprintf('Hentet %s videoer fra spillelisten, men det er flere - lagre siden og velg rediger på nytt. (pageToken: %s)',
        $itemsPerRequest, $pageToken);
      drupal_set_message($message, 'warning');
    }
    // Loop over videos in playlist and check if they exists on HiMoldeX.
    foreach($results['items'] as $item) {
      $video_title = $item['snippet']['title'];
      // Skip promo videos.
      if (stripos($video_title, ' Promo') !== FALSE) {
        continue;
      }
      $video_id = $item['snippet']['resourceId']['videoId'];
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'video')
        ->fieldCondition('field_video_youtube', 'video_id', $video_id, '=');
      $result = $query->execute();
      if (!isset($result['node'])) {
        $youtube_videolink = "https://www.youtube.com/watch?v=" . $video_id;
        $video_published = $item['snippet']['publishedAt'];
        list ($video_date, $dummy) = explode('T', $video_published);

        $videonode = new stdClass();
        $videonode->type = 'video';
        node_object_prepare($videonode);

        $videonode->language = $language;
        $videonode->field_video_type[LANGUAGE_NONE][0]['value'] = 'lecture';
        $videonode->field_video_topic[LANGUAGE_NONE][0]['value'] = $video_title;
        $videonode->field_video_youtube[LANGUAGE_NONE][0]['input'] = $youtube_videolink;
        $videonode->field_video_youtube[LANGUAGE_NONE][0]['video_id'] = $video_id;
        $videonode->field_video_dato[LANGUAGE_NONE][0] = array(
          'value' =>  "$video_date 00:00:00",
          'timezone' => 'Europe/Oslo',
          'timezone_db' =>   'Europe/Oslo',
          'date_type' => 'datetime',
        );

        node_save($videonode);
        drupal_set_message("Opprettet video '$video_title' automatisk fra spillelisten på YouTube.");
        $videos_added[] = $videonode->nid;
      }
    }
    if (count($videos_added) == 0) {
      drupal_set_message("Ingen nye videoer funnet i spillelisten på YouTube.");
    }
  }
  // Add the imported videos to the video list of the course.
  if (count($videos_added) > 0) {
    foreach($videos_added as $videonode_id) {
      $node->field_course_video[LANGUAGE_NONE][] = array('target_id' => $videonode_id);
    }
    drupal_set_message('NB! Husk å lagre siden slik at de nylig importerte videoene faktisk blir knyttet til emnet.', 'warning');
  }
}



